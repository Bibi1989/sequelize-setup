{"version":3,"sources":["../app.js"],"names":["dotenv","config","app","use","express","json","urlencoded","extended","indexRouter","usersRouter","get","req","res","page","next","err","_next","locals","message","error","status"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AACA;;AAHAA,mBAAOC,MAAP;;AAKA,IAAMC,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,+BAAR;AAEAD,GAAG,CAACC,GAAJ,CAAQ,YAAR,EAAsBK,iBAAtB;AACAN,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkBM,iBAAlB;AAEAP,GAAG,CAACQ,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACP,IAAJ,CAAS;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAT;AACD,CAFD,E,CAIA;;AACAX,GAAG,CAACC,GAAJ,CAAQ,UAAUQ,GAAV,EAAeC,GAAf,EAAoBE,IAApB,EAA0B;AAChCA,EAAAA,IAAI,CAAC,4BAAY,GAAZ,CAAD,CAAJ;AACD,CAFD,E,CAIA;;AACAZ,GAAG,CAACC,GAAJ,CAAQ,UAAUY,GAAV,EAAeJ,GAAf,EAAoBC,GAApB,EAAyBI,KAAzB,EAAgC;AACtC;AACAJ,EAAAA,GAAG,CAACK,MAAJ,CAAWC,OAAX,GAAqBH,GAAG,CAACG,OAAzB;AACAN,EAAAA,GAAG,CAACK,MAAJ,CAAWE,KAAX,GAAmBR,GAAG,CAACT,GAAJ,CAAQQ,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCK,GAAvC,GAA6C,EAAhE,CAHsC,CAKtC;;AACAH,EAAAA,GAAG,CAACQ,MAAJ,CAAWL,GAAG,CAACK,MAAJ,IAAc,GAAzB;AACAR,EAAAA,GAAG,CAACP,IAAJ,CAAS;AAAEc,IAAAA,KAAK,EAAEJ,GAAG,CAACG;AAAb,GAAT;AACD,CARD;eAUehB,G","sourcesContent":["import express from \"express\";\nimport createError from \"http-errors\";\nimport cookieParser from \"cookie-parser\";\nimport logger from \"morgan\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nimport indexRouter from \"./routes/index\";\nimport usersRouter from \"./routes/users\";\n\nconst app = express();\n\napp.use(logger(\"dev\"));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use(\"/api/books\", indexRouter);\napp.use(\"/users\", usersRouter);\n\napp.get(\"*\", (req, res) => {\n  res.json({ page: \"Try a valid api\" });\n});\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function (err, req, res, _next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.json({ error: err.message });\n});\n\nexport default app;\n"],"file":"app.js"}